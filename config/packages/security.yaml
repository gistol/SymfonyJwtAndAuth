security:
    encoders:
        App\Entity\User: bcrypt
        App\Entity\UsersAdmin: bcrypt
        FOS\UserBundle\Model\UserInterface: sha512

    providers:
        chain_provider:
            chain:
                providers: ['fos_userbundle', 'app_user_provider']
        fos_userbundle:
            id: fos_user.user_provider.username
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    role_hierarchy:
        ROLE_ADMIN:       [ROLE_USER, ROLE_SONATA_ADMIN]
        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        admin:
            pattern:            /admin(.*)
            context:            user
            form_login:
                provider:       chain_provider
                login_path:     /admin/login
                use_forward:    false
                default_target_path: /admin
                check_path:     /admin/login_check
                failure_path:   null
            logout:
                path:           /admin/logout
                target:         /admin/login
            anonymous:          true

        login:
            pattern: ^/api/login
            stateless: true
            anonymous: true
            json_login:
                provider: app_user_provider
                check_path: /api/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern: ^/api
            stateless: true
            guard:
                provider: chain_provider
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator
        main:
            pattern: .*
            context: user
            form_login:
                provider: chain_provider
                login_path: /login
                use_forward: false
                check_path: /login_check
                failure_path: null
            logout: true
            anonymous: true

    access_control:
        - { path: ^/admin/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/logout$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/login_check$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/resetting, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/register, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/resetting, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/admin/, role: [ROLE_ADMIN, ROLE_SONATA_ADMIN] }
#    access_control:
#        - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
#        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }
#
#        - { path: ^/admin/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
#        - { path: ^/admin/logout$, role: IS_AUTHENTICATED_ANONYMOUSLY }
#        - { path: ^/admin/login_check$, role: IS_AUTHENTICATED_ANONYMOUSLY }
#        - { path: ^/admin/resetting, role: IS_AUTHENTICATED_ANONYMOUSLY }
#
#        - { path: ^/admin/, role: [ROLE_ADMIN, ROLE_SONATA_ADMIN] }
#        - { path: ^/.*, role: IS_AUTHENTICATED_ANONYMOUSLY }