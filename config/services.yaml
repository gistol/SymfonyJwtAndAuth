# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    vk.api.url: '%env(VK_API_URL)%'
    vk.api.client.id: '%env(VK_API_CLIENT_ID)%'
    vk.redirect.uri: '%env(VK_REDIRECT_URI)%'
    vk.api.version: '%env(VK_API_VERSION)%'
    vk.api.scope: '%env(VK_API_SCOPE)%'
    vk.api.secret: '%env(VK_API_SECRET)%'
    app.scheme: '%env(APP_SCHEME)%'
    vk.api.redirect.url: 'https://oauth.vk.com/authorize?client_id=%vk.api.client.id%&display=mobile&redirect_uri=%vk.redirect.uri%&scope=%vk.api.scope%&response_type=code&v=%vk.api.version%'

    vk.api.access.token: 'https://oauth.vk.com/access_token?client_id=%vk.api.client.id%&client_secret=%vk.api.secret%&redirect_uri=%vk.redirect.uri%&code='

    app_link: "egeapp://auth?jwt="
services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    Cocur\Slugify\Slugify:
        autowire: true

    mailer:
        alias: fos_user.mailer.noop
        public: true
    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    App\Admin\UsersAdmin:
        arguments: [~, App\Entity\User, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: User }

    App\Admin\DevicesAdmin:
        arguments: [~, App\Entity\Device, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Device }

    App\Admin\NotificationsAdmin:
        arguments: [~, App\Entity\Notifications, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Notifications }

    App\Admin\CitiesAdmin:
        arguments: [~, App\Entity\Cities, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Cities }

    App\Admin\CoursesAdmin:
        arguments: [~, App\Entity\Courses, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Courses }

    App\Admin\UserAdminAdmin:
        arguments: [~, App\Entity\UserAdmin, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: UserAdmin }

    App\Admin\NewsAdmin:
        arguments: [~, App\Entity\News, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: News }

    App\Admin\AnswerAdmin:
        arguments: [~, App\Entity\Answer, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Answer }

    App\Admin\QuestionAdmin:
        arguments: [~, App\Entity\Question, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Question }

    App\Admin\TaskAdmin:
        arguments: [~, App\Entity\Task, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Task }

    App\Admin\ImageAdmin:
        arguments: [~, App\Entity\Image, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Image }

    App\Admin\LevelsAdmin:
        arguments: [~, App\Entity\Levels, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Levels }

    App\Admin\UserAnswerAdmin:
        arguments: [~, App\Entity\UserAnswer, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: UserAnswer }

    App\Admin\ResourceCategoriesAdmin:
        arguments: [~, App\Entity\ResourceCategories, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: ResourceCategories }

    App\Admin\ResourcesAdmin:
        arguments: [~, App\Entity\ResourceCategories, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Resources }


    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    sensio_framework_extra.view.listener:
        alias: Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener
